package view

import (
	"github.com/Lirikku/models"
	"github.com/Lirikku/utils"
	view_component "github.com/Lirikku/view/component"
	view_layout "github.com/Lirikku/view/layout"
	"github.com/labstack/echo/v4"
)

templ PubSongs(c echo.Context) {
	@view_layout.Main("Song Lyric") {
		@view_component.Nav(utils.GetContext[bool](c, "auth"))
		<section class="w-full mt-5" x-data="audioRecorder(4000)">
			<div class="flex items-center max-w-lg mx-auto">
				<div class="relative w-full">
					<input
						:disabled="searchByRecorded;console.log(searchByRecorded)"
						type="text"
						name="term"
						hx-on::before-request="htmx.find('#search-results').innerHTML='';htmx.find('#error-results').innerHTML=''"
						hx-indicator="#search-loading"
						hx-get={ c.Echo().Reverse("searchSong") }
						hx-trigger="keyup changed delay:500ms"
						hx-target="#search-results"
						hx-target-error="#error-results"
						hx-swap="innerHTML"
						id="term-input"
						class="block w-full p-2.5 rounded-[7px]  !border  !border-gray-300 border-t-transparent bg-transparent bg-white px-3 py-2.5 font-sans text-sm font-normal text-blue-gray-700  shadow-lg shadow-gray-900/5 outline outline-0 ring-4 ring-transparent transition-all placeholder:text-gray-500 placeholder-shown:border placeholder-shown:border-blue-gray-200 placeholder-shown:border-t-blue-gray-200 focus:border-2  focus:!border-gray-900 focus:border-t-transparent focus:!border-t-gray-900 focus:outline-0 focus:ring-gray-900/10 disabled:border-0 disabled:bg-blue-gray-50"
						placeholder="Search song by term..."
					/>
					<div class="absolute inset-y-0 flex items-center end-0 pe-3 gap-x-2">
						<button
							:disabled="searchByRecorded"
							data-dialog-target="dialog-md"
							type="button"
						>
							<svg
								class="w-5 h-5 text-gray-500 hover:text-gray-400"
								xmlns="http://www.w3.org/2000/svg"
								fill="currentColor"
								class="bi bi-volume-up"
								viewBox="0 0 16 16"
							>
								<path d="M11.536 14.01A8.47 8.47 0 0 0 14.026 8a8.47 8.47 0 0 0-2.49-6.01l-.708.707A7.48 7.48 0 0 1 13.025 8c0 2.071-.84 3.946-2.197 5.303z"></path>
								<path d="M10.121 12.596A6.48 6.48 0 0 0 12.025 8a6.48 6.48 0 0 0-1.904-4.596l-.707.707A5.48 5.48 0 0 1 11.025 8a5.48 5.48 0 0 1-1.61 3.89z"></path>
								<path d="M10.025 8a4.5 4.5 0 0 1-1.318 3.182L8 10.475A3.5 3.5 0 0 0 9.025 8c0-.966-.392-1.841-1.025-2.475l.707-.707A4.5 4.5 0 0 1 10.025 8M7 4a.5.5 0 0 0-.812-.39L3.825 5.5H1.5A.5.5 0 0 0 1 6v4a.5.5 0 0 0 .5.5h2.325l2.363 1.89A.5.5 0 0 0 7 12zM4.312 6.39 6 5.04v5.92L4.312 9.61A.5.5 0 0 0 4 9.5H2v-3h2a.5.5 0 0 0 .312-.11"></path>
							</svg>
						</button>
						<div class="flex items-center">
							<!-- Mic On Icon -->
							<button @click="startRecording" x-show="!isRecording">
								<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-5 h-5 text-gray-500 hover:text-gray-400" viewBox="0 0 16 16">
									<path d="M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5"></path>
									<path d="M10 8a2 2 0 1 1-4 0V3a2 2 0 1 1 4 0zM8 0a3 3 0 0 0-3 3v5a3 3 0 0 0 6 0V3a3 3 0 0 0-3-3"></path>
								</svg>
							</button>
							<!-- Wait Listening -->
							<p x-show="isRecording">listening...</p>
						</div>
					</div>
				</div>
			</div>
			<div class="flex flex-col max-w-lg py-3 mx-auto">
				<form
					hx-headers={ utils.Convert2Json(map[string]any{
						"X-CSRF-Token": utils.GetContext[string](c, "csrf"),
					}) }
					hx-indicator="#search-loading"
					hx-post={ c.Echo().Reverse("search.audioSong") }
					hx-target="#search-results"
					hx-swap="innerHTML"
					hx-encoding="multipart/form-data"
					class="hidden"
					id="search-recorded"
				></form>
				<div id="search-results" class="flex flex-col gap-y-2"></div>
				<div id="error-results" class="text-center text-red-500 capitalize"></div>
				@view_component.Spinner(templ.Attributes{"id": "search-loading"}, "w-10 h-10 mx-auto htmx-indicator")
			</div>
			@modalAudio(utils.GetContext[string](c, "csrf"))
		</section>
	}
}

templ PubResultSongs(c echo.Context) {
	@view_component.SongCardContainer[*models.PublicSongsResponse](c) {
		if data := utils.GetContext[*models.PublicSongsResponse](c, "data-card"); data != nil {
			<button
				hx-indicator="#search-loading"
				class="w-full py-2 border-y-2 hover:bg-blue-gray-100"
				hx-on::before-request="htmx.find('#search-results').innerHTML=''"
				hx-trigger="click"
				hx-swap="innerHTML"
				hx-target="#search-results"
				hx-get={ c.Echo().Reverse("detailSong", data.ArtistNames, data.Title) }
			>{ data.Title } ~ { data.ArtistNames }</button>
			if utils.GetContext[bool](c, "auth") {
				<div
					class="flex"
					x-data="{
								'loading': false,
								'status': 0,
								handleResponse() {
									let data;
									try {
										data = JSON.parse(event.detail.xhr.responseText);
									} catch (error) {
										data = {};
									}
									this.loading = false
									this.status = event.detail.xhr.status;
									if(this.status == 400) {
										htmx.find('#search-results').innerHTML = ''
										htmx.find('#error-results').innerHTML = data?.message || 'bad request'
									}else if(this.status != 200) {
										htmx.find('#search-results').innerHTML = ''
										htmx.find('#error-results').innerHTML = data?.message || 'something wrong'
									}
								}
							}"
				>
					if data.Saved {
						<button
							disabled
							class="px-4 py-2 text-sm text-center text-white transition-all bg-gray-400 border border-transparent rounded-md shadow-md bg-slate-800 hover:shadow-lg focus:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"
							type="button"
						>
							<div class="flex gap-x-2">
								<div>Saved</div>
							</div>
						</button>
					} else {
						<button
							x-show="status == 200"
							disabled
							class="px-4 py-2 ml-2 text-sm text-center text-white transition-all bg-gray-400 border border-transparent rounded-md shadow-md bg-slate-800 hover:shadow-lg focus:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"
							type="button"
						>
							Saved
						</button>
						<button
							x-show="status != 200"
							hx-post={ c.Echo().Reverse("my.pubSong") }
							hx-vals={ utils.Convert2Json(echo.Map{
										"artist_names": data.ArtistNames,
										"title": data.Title,
										"key": data.Key,
									}) }
							hx-headers={ utils.Convert2Json(echo.Map{
									"X-CSRF-Token": utils.GetContext[string](c, "csrf"),
								}) }
							x-on:htmx:after-request="handleResponse($event)"
							hx-ext="json-enc"
							class="h-10 px-4 py-2 m-auto text-sm text-center text-white transition-all bg-green-600 border border-transparent rounded-md shadow-md hover:shadow-lg focus:bg-green-700 focus:shadow-none active:bg-green-700 hover:bg-green-700 active:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"
							type="button"
							@click="loading = true"
						>
							<div class="flex gap-x-2">
								<div x-show="loading">
									@view_component.Spinner(nil, "w-5 h-5")
								</div>
								Save
							</div>
						</button>
					}
				</div>
			}
		}
	}
}

templ PubSongDetail(data models.PublicSongDetailResponse) {
	@view_component.SongsDetail(utils.Convert2Map(data))
}

templ modalAudio(csrf string) {
	<div
		data-dialog-backdrop="dialog-md"
		class="pointer-events-none fixed inset-0 z-[999] grid h-screen w-screen place-items-center bg-black bg-opacity-60 opacity-0 backdrop-blur-sm transition-opacity duration-300"
	>
		<form
			hx-post="/search/audio"
			hx-encoding="multipart/form-data"
			hx-target="#search-results"
			hx-target-error="#error-results"
			hx-swap="innerHTML"
			hx-headers={ utils.Convert2Json(map[string]any{
				"X-CSRF-Token": csrf,
			}) }
			hx-indicator="#search-loading"
			data-dialog="dialog-md"
			class="relative m-4 w-2/5 min-w-[40%] max-w-[40%] rounded-lg bg-white font-sans text-base font-light leading-relaxed text-blue-gray-500 antialiased shadow-2xl"
			x-data="{
				uploadedAudioName: '',  // Replace with the actual uploaded file name from the backend
				selectedFileName: '',

				get displayText() {
					return this.selectedFileName || (this.uploadedAudioName ? `Uploaded file: ${this.uploadedAudioName}` : 'Click to upload or drag and drop');
				},

				updateFileName(event) {
					const file = event.target.files[0];
					if (file) {
						this.selectedFileName = file.name;
					}
				}
			}"
		>
			<div
				class="flex items-center p-4 font-sans text-2xl antialiased font-semibold leading-snug shrink-0 text-blue-gray-900"
			>
				Input Audio
			</div>
			<div
				class="relative p-4 font-sans text-base antialiased font-light leading-relaxed border-t border-b border-t-blue-gray-100 border-b-blue-gray-100 text-blue-gray-500"
			>
				<div class="flex items-center justify-center w-full">
					<label for="dropzone-file" class="flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600">
						<div class="flex flex-col items-center justify-center pt-5 pb-6">
							<svg class="w-8 h-8 mb-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
								<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"></path>
							</svg>
							<p class="mb-2 text-sm text-gray-500 dark:text-gray-400 dropzone-info" x-text="displayText"></p>
							<p class="text-xs text-gray-500 dark:text-gray-400">MP3 (max 500kb) </p>
						</div>
						<input id="dropzone-file" name="audio" type="file" class="hidden" @change="updateFileName"/>
					</label>
				</div>
			</div>
			<div class="flex flex-wrap items-center justify-end p-4 shrink-0 text-blue-gray-500">
				<button
					type="button"
					data-ripple-dark="true"
					data-dialog-close="true"
					class="px-6 py-3 mr-1 font-sans text-xs font-bold text-red-500 uppercase transition-all rounded-lg middle none center hover:bg-red-500/10 active:bg-red-500/30 disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"
				>
					Cancel
				</button>
				<button
					type="submit"
					data-ripple-light="true"
					data-dialog-close="true"
					class="middle none center rounded-lg bg-gradient-to-tr from-green-600 to-green-400 py-3 px-6 font-sans text-xs font-bold uppercase text-white shadow-md shadow-green-500/20 transition-all hover:shadow-lg hover:shadow-green-500/40 active:opacity-[0.85] disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"
				>
					Confirm
				</button>
			</div>
		</form>
	</div>
}
